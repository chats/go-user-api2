package tracing

import (
	"context"
	"fmt"
	"time"

	"github.com/chats/go-user-api/internal/config"
	"github.com/rs/zerolog/log"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/exporters/jaeger"
	"go.opentelemetry.io/otel/propagation"
	"go.opentelemetry.io/otel/sdk/resource"
	sdktrace "go.opentelemetry.io/otel/sdk/trace"
	semconv "go.opentelemetry.io/otel/semconv/v1.17.0"
)

// SetupTracing configures Jaeger tracing
func SetupTracing(cfg config.JaegerConfig) (*sdktrace.TracerProvider, error) {
	if !cfg.Enabled {
		log.Info().Msg("Tracing is disabled")
		return nil, nil
	}

	// Create Jaeger exporter
	endpoint := fmt.Sprintf("http://%s:%d/api/traces", cfg.Host, cfg.Port)
	exporter, err := jaeger.New(
		jaeger.WithCollectorEndpoint(jaeger.WithEndpoint(endpoint)),
	)
	if err != nil {
		return nil, fmt.Errorf("failed to create Jaeger exporter: %v", err)
	}

	// Create trace provider
	tp := sdktrace.NewTracerProvider(
		sdktrace.WithBatcher(exporter,
			sdktrace.WithMaxExportBatchSize(10),
			sdktrace.WithBatchTimeout(time.Second),
		),
		sdktrace.WithSampler(sdktrace.AlwaysSample()),
		sdktrace.WithResource(resource.NewWithAttributes(
			semconv.SchemaURL,
			semconv.ServiceNameKey.String(cfg.ServiceName),
		)),
	)

	// Set global trace provider
	otel.SetTracerProvider(tp)

	// Set global propagator
	otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(
		propagation.TraceContext{},
		propagation.Baggage{},
	))

	log.Info().
		Str("endpoint", endpoint).
		Str("service", cfg.ServiceName).
		Msg("Jaeger tracing initialized")

	return tp, nil
}

// ShutdownTracing shuts down the tracer provider
func ShutdownTracing(ctx context.Context, tp *sdktrace.TracerProvider) {
	if tp == nil {
		return
	}

	log.Info().Msg("Shutting down Jaeger tracer")
	if err := tp.Shutdown(ctx); err != nil {
		log.Error().Err(err).Msg("Failed to shutdown tracer provider")
	}
}
