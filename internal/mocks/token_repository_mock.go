// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/repository/token_repository.go
//
// Generated by this command:
//
//	mockgen -source=./internal/domain/repository/token_repository.go -destination=./internal/domain/mocks/token_repository_mock.go -package=mocks TokenRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/chats/go-user-api/internal/domain/entity"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenRepository is a mock of TokenRepository interface.
type MockTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTokenRepositoryMockRecorder
	isgomock struct{}
}

// MockTokenRepositoryMockRecorder is the mock recorder for MockTokenRepository.
type MockTokenRepositoryMockRecorder struct {
	mock *MockTokenRepository
}

// NewMockTokenRepository creates a new mock instance.
func NewMockTokenRepository(ctrl *gomock.Controller) *MockTokenRepository {
	mock := &MockTokenRepository{ctrl: ctrl}
	mock.recorder = &MockTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenRepository) EXPECT() *MockTokenRepositoryMockRecorder {
	return m.recorder
}

// DeleteToken mocks base method.
func (m *MockTokenRepository) DeleteToken(ctx context.Context, tokenID uuid.UUID, tokenType entity.TokenType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", ctx, tokenID, tokenType)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockTokenRepositoryMockRecorder) DeleteToken(ctx, tokenID, tokenType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockTokenRepository)(nil).DeleteToken), ctx, tokenID, tokenType)
}

// DeleteUserTokens mocks base method.
func (m *MockTokenRepository) DeleteUserTokens(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserTokens", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserTokens indicates an expected call of DeleteUserTokens.
func (mr *MockTokenRepositoryMockRecorder) DeleteUserTokens(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserTokens", reflect.TypeOf((*MockTokenRepository)(nil).DeleteUserTokens), ctx, userID)
}

// GetToken mocks base method.
func (m *MockTokenRepository) GetToken(ctx context.Context, tokenID uuid.UUID, tokenType entity.TokenType) (*entity.TokenDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx, tokenID, tokenType)
	ret0, _ := ret[0].(*entity.TokenDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockTokenRepositoryMockRecorder) GetToken(ctx, tokenID, tokenType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockTokenRepository)(nil).GetToken), ctx, tokenID, tokenType)
}

// StoreAccessToken mocks base method.
func (m *MockTokenRepository) StoreAccessToken(ctx context.Context, details *entity.TokenDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAccessToken", ctx, details)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreAccessToken indicates an expected call of StoreAccessToken.
func (mr *MockTokenRepositoryMockRecorder) StoreAccessToken(ctx, details any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAccessToken", reflect.TypeOf((*MockTokenRepository)(nil).StoreAccessToken), ctx, details)
}

// StoreRefreshToken mocks base method.
func (m *MockTokenRepository) StoreRefreshToken(ctx context.Context, details *entity.TokenDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRefreshToken", ctx, details)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRefreshToken indicates an expected call of StoreRefreshToken.
func (mr *MockTokenRepositoryMockRecorder) StoreRefreshToken(ctx, details any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRefreshToken", reflect.TypeOf((*MockTokenRepository)(nil).StoreRefreshToken), ctx, details)
}
